/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const CarsCreateLazyImport = createFileRoute('/cars/create')()
const CarsEditIdLazyImport = createFileRoute('/cars/edit/$id')()
const TypesRoutesCreateLazyImport = createFileRoute("/types-routes/create")();
const TypesRoutesIdLazyImport = createFileRoute("/types-routes/$id")();
const TypesRoutesEditIdLazyImport = createFileRoute("/types-routes/edit/$id")();

// Create/Update Routes

const TypesLazyRoute = TypesLazyImport.update({
  id: "/types",
  path: "/types",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/types.lazy").then((d) => d.Route));

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const CarsCreateLazyRoute = CarsCreateLazyImport.update({
  id: '/cars/create',
  path: '/cars/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cars/create.lazy').then((d) => d.Route))

const CarsEditIdLazyRoute = CarsEditIdLazyImport.update({
  id: '/cars/edit/$id',
  path: '/cars/edit/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cars/edit/$id.lazy').then((d) => d.Route))

const TypesRoutesCreateLazyRoute = TypesRoutesCreateLazyImport.update({
  id: "/types-routes/create",
  path: "/types-routes/create",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/types-routes/create.lazy").then((d) => d.Route)
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/cars/create": {
      id: "/cars/create";
      path: "/cars/create";
      fullPath: "/cars/create";
      preLoaderRoute: typeof CarsCreateLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/cars/edit/$id": {
      id: "/cars/edit/$id";
      path: "/cars/edit/$id";
      fullPath: "/cars/edit/$id";
      preLoaderRoute: typeof CarsEditIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/types": {
      id: "/types";
      path: "/types";
      fullPath: "/types";
      preLoaderRoute: typeof TypesLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/types-routes/$id": {
      id: "/types-routes/$id";
      path: "/types-routes/$id";
      fullPath: "/types-routes/$id";
      preLoaderRoute: typeof TypesRoutesIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/types-routes/create": {
      id: "/types-routes/create";
      path: "/types-routes/create";
      fullPath: "/types-routes/create";
      preLoaderRoute: typeof TypesRoutesCreateLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/types-routes/edit/$id": {
      id: "/types-routes/edit/$id";
      path: "/types-routes/edit/$id";
      fullPath: "/types-routes/edit/$id";
      preLoaderRoute: typeof TypesRoutesEditIdLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/login": typeof LoginLazyRoute;
  "/register": typeof RegisterLazyRoute;
  "/types": typeof TypesLazyRoute;
  "/cars/create": typeof CarsCreateLazyRoute;
  "/cars/edit/$id": typeof CarsEditIdLazyRoute;
  "/types-routes/$id": typeof TypesRoutesIdLazyRoute;
  "/types-routes/create": typeof TypesRoutesCreateLazyRoute;
  "/types-routes/edit/$id": typeof TypesRoutesEditIdLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/cars/create': typeof CarsCreateLazyRoute
  '/cars/edit/$id': typeof CarsEditIdLazyRoute
  '/types': typeof TypesLazyRoute
  '/types-routes/$id': typeof TypesRoutesIdLazyRoute
  '/types-routes/create': typeof TypesRoutesCreateLazyRoute
  '/types-routes/edit/$id': typeof TypesRoutesEditIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/cars/create': typeof CarsCreateLazyRoute
  '/cars/edit/$id': typeof CarsEditIdLazyRoute
   '/types': typeof TypesLazyRoute
  '/types-routes/$id': typeof TypesRoutesIdLazyRoute
  '/types-routes/create': typeof TypesRoutesCreateLazyRoute
  '/types-routes/edit/$id': typeof TypesRoutesEditIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register' | '/cars/create' | '/cars/edit/$id'  | '/types'
    | '/types-routes/$id'
    | '/types-routes/create'
    | '/types-routes/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/cars/create' | '/cars/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/cars/create'
    | '/cars/edit/$id'
    '/types'
    | '/types-routes/$id'
    | '/types-routes/create'
    | '/types-routes/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  CarsCreateLazyRoute: typeof CarsCreateLazyRoute
  CarsEditIdLazyRoute: typeof CarsEditIdLazyRoute
  TypesLazyRoute: typeof TypesLazyRoute
  TypesRoutesIdLazyRoute: typeof TypesRoutesIdLazyRoute
  TypesRoutesCreateLazyRoute: typeof TypesRoutesCreateLazyRoute
  TypesRoutesEditIdLazyRoute: typeof TypesRoutesEditIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  TypesLazyRoute: TypesLazyRoute,
  CarsCreateLazyRoute: CarsCreateLazyRoute,
  CarsEditIdLazyRoute: CarsEditIdLazyRoute,
  TypesRoutesIdLazyRoute: TypesRoutesIdLazyRoute,
  TypesRoutesCreateLazyRoute: TypesRoutesCreateLazyRoute,
  TypesRoutesEditIdLazyRoute: TypesRoutesEditIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/cars/create",
        "/cars/edit/$id",
        "/types",
        "/types-routes/$id",
        "/types-routes/create",
        "/types-routes/edit/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/login": {
      "filePath": "login.lazy.jsx"
    },
    "/register": {
      "filePath": "register.lazy.jsx"
    },
    "/cars/create": {
      "filePath": "cars/create.lazy.jsx"
    },
    "/cars/edit/$id": {
      "filePath": "cars/edit/$id.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
